// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
namespace BlazorMLDashboard
{
    public partial class MLModel
    {
        /// <summary>
        /// model input class for MLModel.
        /// </summary>
        #region model input class
        public class TripModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"vendor_id")]
            public string VendorId { get; set; } = string.Empty;

            [LoadColumn(1)]
            [ColumnName(@"rate_code")]
            public float RateCode { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"passenger_count")]
            public float PassengerCount { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"trip_distance")]
            public float TripDistance { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"payment_type")]
            public string PaymentType { get; set; } = string.Empty;

            [LoadColumn(6)]
            [ColumnName(@"fare_amount")]
            [Display(AutoGenerateField = false)]
            public float FareAmount { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModel.
        /// </summary>
        #region model output class
        public class TripModelOutput
        {
            [ColumnName(@"vendor_id")]
            public float[]? VendorId { get; set; }

            [ColumnName(@"rate_code")]
            public float RateCode { get; set; }

            [ColumnName(@"passenger_count")]
            public float PassengerCount { get; set; }

            [ColumnName(@"trip_distance")]
            public float TripDistance { get; set; }

            [ColumnName(@"payment_type")]
            public float[]? PaymentType { get; set; }

            [ColumnName(@"fareAmount")]
            public float FareAmount { get; set; }

            [ColumnName(@"Features")]
            public float[]? Features { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion
        public class TestDataPoint
        {
            [ColumnName("fare_amount"), LoadColumn(6)]
            public float Actual { get; set; }
            [ColumnName("Score")]
            public float Predicted { get; set; }
        }

        public class DataPoint
        {
            public double X { get; set; }
            public double Y { get; set; }
        }
        public class TestDataResults
        {
            public TestDataResults() { }
            public TestDataResults(IEnumerable<TestDataPoint> resultSet) => ResultSet = resultSet;
            public IEnumerable<TestDataPoint> ResultSet { get; set; } = [];
            public IEnumerable<DataPoint> MinimizedSquareError => GetMinimizedSquareError();
            public double RSquared { get; set; }
            public double RootMeansSquaredError { get; set; }
            public double MeanSquaredError { get; set; }
            public double MeanAbsoluteError { get; set; }

            private IEnumerable<DataPoint> GetMinimizedSquareError()
            {
                var funcY = GetRegressionFunction();
                var min = ResultSet.Min(x => x.Actual);
                var max = ResultSet.Max(x => x.Actual);
                var a = new DataPoint { X = min, Y = funcY(min) };
                var b = new DataPoint { X = max, Y = funcY(max) };
                return new[] { a, b };
            }

            private Func<double, double> GetRegressionFunction()
            {
                // Regression Line calculation explanation:
                // https://www.khanacademy.org/math/statistics-probability/describing-relationships-quantitative-data/more-on-regression/v/regression-line-example

                double xyMultiTotal = ResultSet.Sum(r => r.Actual * r.Predicted);
                double xSquareTotal = ResultSet.Sum(r => r.Actual * r.Actual);

                double meanX = ResultSet.Average(r => r.Actual);
                double meanY = ResultSet.Average(r => r.Predicted);

                double meanXY = ResultSet.Average(r => r.Actual * r.Predicted);
                double meanXsquare = ResultSet.Average(r => r.Actual * r.Actual);

                //double mslope = (meanXY - meanX * meanY) / meanXsquare - (meanX * meanX);

                double mslope = ((meanX * meanY) - meanXY) / ((meanX * meanX) - meanXsquare);

                double bintercept = meanY - (mslope * meanX);

                //Generic function for Y for the regression line
                // y = (m * x) + b;

                ////Function for Y1 in the line
                return (double x) => (mslope * x) + bintercept;
            }
        }

        private static string MLNetModelPath = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "MLModel/MLModel.mlnet");

        public static readonly Lazy<PredictionEngine<TripModelInput, TripModelOutput>> PredictEngine = new Lazy<PredictionEngine<TripModelInput, TripModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<TripModelInput, TripModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<TripModelInput, TripModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="TripModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" TripModelOutput"/></returns>
        public static TripModelOutput Predict(TripModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
