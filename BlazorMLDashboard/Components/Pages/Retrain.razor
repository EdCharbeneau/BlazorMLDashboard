@page "/retrain"
@using System.Text.Json
@using static BlazorMLDashboard.MLModel
@using BlazorMLDashboard.Components.Pages.DataExplorer
@using Microsoft.Extensions.Options
@inject IOptions<ModelSettings> options
@inject IConfiguration config

<PageTitle>Retrain</PageTitle>
@if (testResults != null)
{
        <TelerikChart Width="600px" Height="600px">

            <ChartSeriesItems>

                <ChartSeries Type="ChartSeriesType.ScatterLine" Data="@testResults.MinimizedSquareError"
                             XField="@nameof(DataPoint.X)"
                             YField="@nameof(DataPoint.Y)"
                             Name="Minimized Square Error">
                </ChartSeries>
                <ChartSeries Type="ChartSeriesType.Scatter"
                             Data="@testResults.ResultSet"
                             XField="@nameof(TestDataPoint.Actual)"
                             YField="@nameof(TestDataPoint.Predicted)">
                    <ChartSeriesMarkers Type="ChartSeriesMarkersType.Cross" Size="3"></ChartSeriesMarkers>
                </ChartSeries>
                <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom">
                </ChartLegend>
            </ChartSeriesItems>
        </TelerikChart>
        <h3>Stats</h3>
        <ul class="list-group">
            <li class="list-group-item"><span>RMSE: <span class="data">@testResults.RootMeansSquaredError.ToString("#.###")</span></span></li>
            <li class="list-group-item">MAE: <span class="data">@testResults.MeanAbsoluteError.ToString("#.###")</span></li>
            <li class="list-group-item">MSE: <span class="data">@testResults.MeanSquaredError.ToString("#.###")</span></li>
            <li class="list-group-item">R<sup>2</sup>: <span class="data">@testResults.RSquared.ToString("P")</span></li>
        </ul>
    <SpreadsheetView FilePath="@settings.GetPublicPath(settings.PreprocessedTrainDataFileName)">

        </SpreadsheetView>
}
<button class="btn btn-primary" @onclick="IncrementCount">Retrain Model</button>

@code {
    private ModelSettings settings => options.Value;

    private async Task IncrementCount()
    {
        var model = new MLModel(options);
        model.Train();
        model.Evaluate();
        await Load();
    }

    TestDataResults? testResults;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        string path = settings.GetPublicPath(settings.AnalysisFileName);
        if (System.IO.File.Exists(path))
        {
            string json = await System.IO.File.ReadAllTextAsync(path);
            testResults = System.Text.Json.JsonSerializer.Deserialize<TestDataResults>(json, new JsonSerializerOptions(JsonSerializerDefaults.Web));
        }
    }

}
